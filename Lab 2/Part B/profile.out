Total: 1310 samples
    1167  89.1%  89.1%     1310 100.0% threadFun
     120   9.2%  98.2%      120   9.2% __strcmp_sse42
      11   0.8%  99.1%       85   6.5% SortedList_insert
       9   0.7%  99.8%       57   4.4% SortedList_lookup
       2   0.2%  99.9%        2   0.2% _init
       1   0.1% 100.0%        1   0.1% SortedList_length
       0   0.0% 100.0%     1310 100.0% __clone
       0   0.0% 100.0%       57   4.4% secondStep
       0   0.0% 100.0%     1310 100.0% start_thread
ROUTINE ====================== threadFun in /u/eng/class/classurx/111/proj2/partb/lab2_list.c
  1167   1310 Total samples (flat / cumulative)
     .      .   66:         freeMe();
     .      .   67:         exit(2);
     .      .   68:     }
     .      .   69: }
     .      .   70: 
---
     .      .   71: void* threadFun(void *eNum){
     .      .   72:     int start = *((int*)eNum);
     .      .   73:     int total = iterNum*threadNum;
     .      .   74:     int n;
     .      .   75:     int bucket = 0;
     .      .   76:     struct timespec beginTime;
     .      .   77:     struct timespec finishTime;
     .      .   78:     
     .      .   79:     for (n = start; n < total; n += threadNum){
     .      .   80:         bucket = hash(elements[n].key) % listNum;
     .      .   81:         switch(opt_sync){
     .      .   82:             case 0:
     .      .   83:                 SortedList_insert(list[bucket], &elements[n]);
     .      .   84:                 break;
     .      .   85:             case 1:
     .      .   86:                 clock_gettime(CLOCK_MONOTONIC, &beginTime);
     .      .   87:                 pthread_mutex_lock(&mutexLock[bucket]);
     .      .   88:                 clock_gettime(CLOCK_MONOTONIC, &finishTime);
     .      .   89:                 threadTimes[start] += 1000000000*   (finishTime.tv_sec -  beginTime.tv_sec) +
     .      .   90:                                                     (finishTime.tv_nsec - beginTime.tv_nsec);
     .      .   91:                 SortedList_insert(list[bucket], &elements[n]);
     .      .   92:                 pthread_mutex_unlock(&mutexLock[bucket]);
     .      .   93:                 break;
     .      .   94:             case 2:
     .      .   95:                 clock_gettime(CLOCK_MONOTONIC, &beginTime);
   575    575   96:                 while (__sync_lock_test_and_set(&spinLock[bucket], 1)){
     .      .   97:                     continue;
     .      .   98:                 }
     .      .   99:                 clock_gettime(CLOCK_MONOTONIC, &finishTime);
     .      .  100:                 threadTimes[start] += 1000000000*   (finishTime.tv_sec -  beginTime.tv_sec) +
     .      .  101:                                                     (finishTime.tv_nsec - beginTime.tv_nsec);
     .     85  102:                 SortedList_insert(list[bucket], &elements[n]);
     .      .  103:                 __sync_lock_release(&spinLock[bucket]);
     .      .  104:                 break;
     .      .  105:         }
     .      .  106:     }
     .      .  107:     
     .      .  108:     int temp = 0;
     .      .  109:     int tempTot = 0;
     .      .  110:     switch(opt_sync){
     .      .  111:         case 0:
     .      .  112:             for (n = 0; n < listNum; n++){
     .      .  113:                 temp = SortedList_length(list[n]);
     .      .  114:                 if(temp == -1){
     .      .  115:                     fprintf(stderr, "ERROR: SortedList_length detected corrupted list\n");
     .      .  116:                     freeMe();
     .      .  117:                     exit(2);
     .      .  118:                 }
     .      .  119:                 tempTot += temp;
     .      .  120:             }
     .      .  121:             break;
     .      .  122:         case 1:
     .      .  123:             for (n = 0; n < listNum; n++){
     .      .  124:                 clock_gettime(CLOCK_MONOTONIC, &beginTime);
     .      .  125:                 pthread_mutex_lock(&mutexLock[n]);
     .      .  126:                 clock_gettime(CLOCK_MONOTONIC, &finishTime);
     .      .  127:                 threadTimes[start] += 1000000000*   (finishTime.tv_sec -  beginTime.tv_sec) +
     .      .  128:                                                     (finishTime.tv_nsec - beginTime.tv_nsec);
     .      .  129:                 temp = SortedList_length(list[n]);
     .      .  130:                 pthread_mutex_unlock(&mutexLock[n]);
     .      .  131:                 if(temp == -1){
     .      .  132:                     fprintf(stderr, "ERROR: SortedList_length detected corrupted list\n");
     .      .  133:                     freeMe();
     .      .  134:                     exit(2);
     .      .  135:                 }
     .      .  136:                 tempTot += temp;
     .      .  137:             }
     .      .  138:             break;
     .      .  139:         case 2:
     .      .  140:             for (n = 0; n < listNum; n++){
     .      .  141:                 clock_gettime(CLOCK_MONOTONIC, &beginTime);
     .      .  142:                 while (__sync_lock_test_and_set(&spinLock[n], 1)){
     .      .  143:                     continue;
     .      .  144:                 }
     .      .  145:                 clock_gettime(CLOCK_MONOTONIC, &finishTime);
     .      .  146:                 threadTimes[start] += 1000000000*   (finishTime.tv_sec -  beginTime.tv_sec) +
     .      .  147:                                                     (finishTime.tv_nsec - beginTime.tv_nsec);
     .      1  148:                 temp = SortedList_length(list[n]);
     .      .  149:                 __sync_lock_release(&spinLock[n]);
     .      .  150:                 
     .      .  151:                 if(temp == -1){
     .      .  152:                     fprintf(stderr, "ERROR: SortedList_length detected corrupted list\n");
     .      .  153:                     freeMe();
     .      .  154:                     exit(2);
     .      .  155:                 }
     .      .  156:                 tempTot += temp;
     .      .  157:             }
     .      .  158:             break;
     .      .  159:     }
     .      .  160:     
     .      .  161:     for (n = start; n < total; n += threadNum){
     .      .  162:         bucket = hash(elements[n].key) % listNum;
     .      .  163:         switch(opt_sync){
     .      .  164:             case 0:
     .      .  165:                 secondStep(n, bucket);
     .      .  166:                 break;
     .      .  167:             case 1:
     .      .  168:                 clock_gettime(CLOCK_MONOTONIC, &beginTime);
     .      .  169:                 pthread_mutex_lock(&mutexLock[bucket]);
     .      .  170:                 clock_gettime(CLOCK_MONOTONIC, &finishTime);
     .      .  171:                 threadTimes[start] += 1000000000*   (finishTime.tv_sec -  beginTime.tv_sec) +
     .      .  172:                                                     (finishTime.tv_nsec - beginTime.tv_nsec);
     .      .  173:                 secondStep(n, bucket);
     .      .  174: 
     .      .  175:                 pthread_mutex_unlock(&mutexLock[bucket]);
     .      .  176:                 break;
     .      .  177:             case 2:
     .      .  178:                 clock_gettime(CLOCK_MONOTONIC, &beginTime);
   590    590  179:                 while (__sync_lock_test_and_set(&spinLock[bucket], 1)){
     2      2  180:                     continue;
     .      .  181:                 }
     .      .  182:                 clock_gettime(CLOCK_MONOTONIC, &finishTime);
     .      .  183:                 threadTimes[start] += 1000000000*   (finishTime.tv_sec -  beginTime.tv_sec) +
     .      .  184:                                                     (finishTime.tv_nsec - beginTime.tv_nsec);
     .     57  185:                 secondStep(n, bucket);
     .      .  186:                 __sync_lock_release(&spinLock[bucket]);
     .      .  187:                 break;
     .      .  188:         }
     .      .  189:     }
     .      .  190: 
     .      .  191:     return NULL;
     .      .  192: }
---
     .      .  193: 
     .      .  194: int main(int argc, char ** argv) {
     .      .  195:     struct option long_opts[] = {
     .      .  196:         {"threads",     required_argument,  NULL,   't'},
     .      .  197:         {"iterations",  required_argument,  NULL,   'i'},
ROUTINE ====================== threadFun in /u/eng/class/classurx/111/proj2/partb/lab2_list.c
  1167   1310 Total samples (flat / cumulative)
     .      .   66:         freeMe();
     .      .   67:         exit(2);
     .      .   68:     }
     .      .   69: }
     .      .   70: 
---
     .      .   71: void* threadFun(void *eNum){
     .      .   72:     int start = *((int*)eNum);
     .      .   73:     int total = iterNum*threadNum;
     .      .   74:     int n;
     .      .   75:     int bucket = 0;
     .      .   76:     struct timespec beginTime;
     .      .   77:     struct timespec finishTime;
     .      .   78:     
     .      .   79:     for (n = start; n < total; n += threadNum){
     .      .   80:         bucket = hash(elements[n].key) % listNum;
     .      .   81:         switch(opt_sync){
     .      .   82:             case 0:
     .      .   83:                 SortedList_insert(list[bucket], &elements[n]);
     .      .   84:                 break;
     .      .   85:             case 1:
     .      .   86:                 clock_gettime(CLOCK_MONOTONIC, &beginTime);
     .      .   87:                 pthread_mutex_lock(&mutexLock[bucket]);
     .      .   88:                 clock_gettime(CLOCK_MONOTONIC, &finishTime);
     .      .   89:                 threadTimes[start] += 1000000000*   (finishTime.tv_sec -  beginTime.tv_sec) +
     .      .   90:                                                     (finishTime.tv_nsec - beginTime.tv_nsec);
     .      .   91:                 SortedList_insert(list[bucket], &elements[n]);
     .      .   92:                 pthread_mutex_unlock(&mutexLock[bucket]);
     .      .   93:                 break;
     .      .   94:             case 2:
     .      .   95:                 clock_gettime(CLOCK_MONOTONIC, &beginTime);
   575    575   96:                 while (__sync_lock_test_and_set(&spinLock[bucket], 1)){
     .      .   97:                     continue;
     .      .   98:                 }
     .      .   99:                 clock_gettime(CLOCK_MONOTONIC, &finishTime);
     .      .  100:                 threadTimes[start] += 1000000000*   (finishTime.tv_sec -  beginTime.tv_sec) +
     .      .  101:                                                     (finishTime.tv_nsec - beginTime.tv_nsec);
     .     85  102:                 SortedList_insert(list[bucket], &elements[n]);
     .      .  103:                 __sync_lock_release(&spinLock[bucket]);
     .      .  104:                 break;
     .      .  105:         }
     .      .  106:     }
     .      .  107:     
     .      .  108:     int temp = 0;
     .      .  109:     int tempTot = 0;
     .      .  110:     switch(opt_sync){
     .      .  111:         case 0:
     .      .  112:             for (n = 0; n < listNum; n++){
     .      .  113:                 temp = SortedList_length(list[n]);
     .      .  114:                 if(temp == -1){
     .      .  115:                     fprintf(stderr, "ERROR: SortedList_length detected corrupted list\n");
     .      .  116:                     freeMe();
     .      .  117:                     exit(2);
     .      .  118:                 }
     .      .  119:                 tempTot += temp;
     .      .  120:             }
     .      .  121:             break;
     .      .  122:         case 1:
     .      .  123:             for (n = 0; n < listNum; n++){
     .      .  124:                 clock_gettime(CLOCK_MONOTONIC, &beginTime);
     .      .  125:                 pthread_mutex_lock(&mutexLock[n]);
     .      .  126:                 clock_gettime(CLOCK_MONOTONIC, &finishTime);
     .      .  127:                 threadTimes[start] += 1000000000*   (finishTime.tv_sec -  beginTime.tv_sec) +
     .      .  128:                                                     (finishTime.tv_nsec - beginTime.tv_nsec);
     .      .  129:                 temp = SortedList_length(list[n]);
     .      .  130:                 pthread_mutex_unlock(&mutexLock[n]);
     .      .  131:                 if(temp == -1){
     .      .  132:                     fprintf(stderr, "ERROR: SortedList_length detected corrupted list\n");
     .      .  133:                     freeMe();
     .      .  134:                     exit(2);
     .      .  135:                 }
     .      .  136:                 tempTot += temp;
     .      .  137:             }
     .      .  138:             break;
     .      .  139:         case 2:
     .      .  140:             for (n = 0; n < listNum; n++){
     .      .  141:                 clock_gettime(CLOCK_MONOTONIC, &beginTime);
     .      .  142:                 while (__sync_lock_test_and_set(&spinLock[n], 1)){
     .      .  143:                     continue;
     .      .  144:                 }
     .      .  145:                 clock_gettime(CLOCK_MONOTONIC, &finishTime);
     .      .  146:                 threadTimes[start] += 1000000000*   (finishTime.tv_sec -  beginTime.tv_sec) +
     .      .  147:                                                     (finishTime.tv_nsec - beginTime.tv_nsec);
     .      1  148:                 temp = SortedList_length(list[n]);
     .      .  149:                 __sync_lock_release(&spinLock[n]);
     .      .  150:                 
     .      .  151:                 if(temp == -1){
     .      .  152:                     fprintf(stderr, "ERROR: SortedList_length detected corrupted list\n");
     .      .  153:                     freeMe();
     .      .  154:                     exit(2);
     .      .  155:                 }
     .      .  156:                 tempTot += temp;
     .      .  157:             }
     .      .  158:             break;
     .      .  159:     }
     .      .  160:     
     .      .  161:     for (n = start; n < total; n += threadNum){
     .      .  162:         bucket = hash(elements[n].key) % listNum;
     .      .  163:         switch(opt_sync){
     .      .  164:             case 0:
     .      .  165:                 secondStep(n, bucket);
     .      .  166:                 break;
     .      .  167:             case 1:
     .      .  168:                 clock_gettime(CLOCK_MONOTONIC, &beginTime);
     .      .  169:                 pthread_mutex_lock(&mutexLock[bucket]);
     .      .  170:                 clock_gettime(CLOCK_MONOTONIC, &finishTime);
     .      .  171:                 threadTimes[start] += 1000000000*   (finishTime.tv_sec -  beginTime.tv_sec) +
     .      .  172:                                                     (finishTime.tv_nsec - beginTime.tv_nsec);
     .      .  173:                 secondStep(n, bucket);
     .      .  174: 
     .      .  175:                 pthread_mutex_unlock(&mutexLock[bucket]);
     .      .  176:                 break;
     .      .  177:             case 2:
     .      .  178:                 clock_gettime(CLOCK_MONOTONIC, &beginTime);
   590    590  179:                 while (__sync_lock_test_and_set(&spinLock[bucket], 1)){
     2      2  180:                     continue;
     .      .  181:                 }
     .      .  182:                 clock_gettime(CLOCK_MONOTONIC, &finishTime);
     .      .  183:                 threadTimes[start] += 1000000000*   (finishTime.tv_sec -  beginTime.tv_sec) +
     .      .  184:                                                     (finishTime.tv_nsec - beginTime.tv_nsec);
     .     57  185:                 secondStep(n, bucket);
     .      .  186:                 __sync_lock_release(&spinLock[bucket]);
     .      .  187:                 break;
     .      .  188:         }
     .      .  189:     }
     .      .  190: 
     .      .  191:     return NULL;
     .      .  192: }
---
     .      .  193: 
     .      .  194: int main(int argc, char ** argv) {
     .      .  195:     struct option long_opts[] = {
     .      .  196:         {"threads",     required_argument,  NULL,   't'},
     .      .  197:         {"iterations",  required_argument,  NULL,   'i'},
